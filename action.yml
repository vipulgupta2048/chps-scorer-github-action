name: 'CHPS Scorer'
description: 'Run automated checks for the CHPs (Container Hardening Points) specification on container images'
author: 'vipulgupta2048'

inputs:
  image:
    description: 'Container image to scan (e.g., nginx:latest)'
    required: true
  output-format:
    description: 'Output format (default: normal output, options: json)'
    required: false
    default: 'json'
  skip-cves:
    description: 'Skip CVE scanning'
    required: false
    default: 'false'
  dockerfile:
    description: 'Path to Dockerfile for additional checks'
    required: false

outputs:
  result:
    description: 'Raw JSON output from the CHPS scoring'
    value: ${{ steps.run-scorer.outputs.stdout }}
  overall_grade:
    description: 'Overall grade (A+, A, B, C, D, E)'
    value: ${{ steps.process-results.outputs.overall_grade }}
  score:
    description: 'Total score achieved'
    value: ${{ steps.process-results.outputs.score }}
  max_score:
    description: 'Maximum possible score'
    value: ${{ steps.process-results.outputs.max_score }}
  create_issue:
    description: 'Whether findings should trigger an issue (true/false)'
    value: ${{ steps.process-results.outputs.create_issue }}

runs:
  using: 'composite'
  steps:
    - name: Run CHPS Scorer
      id: run-scorer
      uses: docker://ghcr.io/vipulgupta2048/chps-scorer:latest
      with:
        args: >
          ${{ inputs.skip-cves == 'true' && '--skip-cves' || '' }}
          ${{ inputs.output-format == 'json' && '-o json' || '-o json' }}
          ${{ inputs.dockerfile != '' && format('-d {0}', inputs.dockerfile) || '' }}
          ${{ inputs.image }}
      
    - name: Process Results
      id: process-results
      shell: bash
      run: |
        # Store the raw output
        echo "result<<EOF" >> $GITHUB_OUTPUT
        echo "${{ steps.run-scorer.outputs.stdout }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Parse the JSON output
        RESULT_JSON="${{ steps.run-scorer.outputs.stdout }}"
        OVERALL_GRADE=$(echo "$RESULT_JSON" | jq -r '.overall.grade')
        SCORE=$(echo "$RESULT_JSON" | jq -r '.overall.score')
        MAX_SCORE=$(echo "$RESULT_JSON" | jq -r '.overall.max')
        
        echo "overall_grade=$OVERALL_GRADE" >> $GITHUB_OUTPUT
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        echo "max_score=$MAX_SCORE" >> $GITHUB_OUTPUT
        
        if [[ "$OVERALL_GRADE" != "A+" ]]; then
          echo "create_issue=true" >> $GITHUB_OUTPUT
        else
          echo "create_issue=false" >> $GITHUB_OUTPUT
        fi

branding:
  icon: 'shield'
  color: 'blue'